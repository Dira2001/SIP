# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset (replace 'your_dataset.csv' with the actual dataset file)
# The dataset should include columns: 'user_id', 'item_id', 'rating'
df = pd.read_csv('your_dataset.csv')

# Display dataset info
print("Dataset Head:\n", df.head())
print("\nDataset Info:\n")
print(df.info())

# Preprocessing: Check for missing values
print("\nMissing Values:\n", df.isnull().sum())
df = df.dropna()  # Drop rows with missing values

# Create a pivot table for user-item matrix
user_item_matrix = df.pivot_table(index='user_id', columns='item_id', values='rating').fillna(0)

# Calculate cosine similarity between users
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

# Recommendation function based on Collaborative Filtering
def recommend_items(user_id, n_recommendations=5):
    # Get the similarity scores for the input user
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)
    
    # Get the items rated by similar users
    similar_users_items = user_item_matrix.loc[similar_users.index]
    
    # Average ratings of similar users
    mean_ratings = similar_users_items.mean(axis=0).sort_values(ascending=False)
    
    # Recommend top N items the user hasn't rated
    rated_items = user_item_matrix.loc[user_id][user_item_matrix.loc[user_id] > 0].index
    recommendations = mean_ratings.drop(rated_items).head(n_recommendations)
    
    return recommendations

# Test the recommendation system
user_id = 1  # Replace with a user ID from your dataset
recommendations = recommend_items(user_id)
print(f"\nRecommendations for User {user_id}:\n", recommendations)

# Evaluate the model using RMSE
train, test = train_test_split(df, test_size=0.2)
train_matrix = train.pivot_table(index='user_id', columns='item_id', values='rating').fillna(0)
test_matrix = test.pivot_table(index='user_id', columns='item_id', values='rating').fillna(0)

def calculate_rmse(predictions, ground_truth):
    differences = np.array(predictions) - np.array(ground_truth)
    return np.sqrt(np.mean(differences ** 2))

# Calculate predictions for test data
test_users = test_matrix.index
test_items = test_matrix.columns
predictions = []

for user in test_users:
    pred = recommend_items(user, len(test_items))
    predictions.extend(pred.values)

ground_truth = test_matrix.values[test_matrix.values.nonzero()]
rmse = calculate_rmse(predictions, ground_truth)
print(f"\nModel RMSE: {rmse:.2f}")

# Visualize the similarity matrix
sns.heatmap(user_similarity, cmap="coolwarm")
plt.title("User Similarity Matrix")
plt.xlabel("Users")
plt.ylabel("Users")
plt.show()
